#include<iostream>
#include<exception>
using namespace std;

class dimensionmismatchexception : public exception {
    string message;
public:
    dimensionmismatchexception(string message): message(message) {}

    const char* what() const noexcept {
        return message.c_str();
    }
};

template<typename matrix, int MAX_ROWS = 10, int MAX_COLS = 10>
class Matrix {
public:
    int rows, cols;
    matrix num[MAX_ROWS][MAX_COLS];

    Matrix() {
        rows = cols = 0;
    }

    Matrix(int rows, int cols) {
        this->rows = rows;
        this->cols = cols;
    }

    void input() {
        for(int i = 0; i < rows; i++) {
            for(int j = 0; j < cols; j++) {
                cin >> num[i][j];
            }
        }
    }

    void display() {
        for (int i = 0; i < rows; i++) {
            for (int j = 0; j < cols; j++) {
                cout << num[i][j] << " ";
            }
            cout << endl;
        }
    }

    // Member function version of operator+
    Matrix operator+(const Matrix &other) {
        if (rows != other.rows || cols != other.cols) {
            throw dimensionmismatchexception(" - matrices have different dimensions.");
        }

        Matrix result(rows, cols);
        for (int i = 0; i < rows; i++) {
            for (int j = 0; j < cols; j++) {
                result.num[i][j] = num[i][j] + other.num[i][j];
            }
        }
        return result;
    }
};

int main() {
    try {
        Matrix<int> m1(2, 2), m2(2, 2);
        cout << "Enter matrix 1 elements:\n";
        m1.input();
        cout << "Enter matrix 2 elements:\n";
        m2.input();
        Matrix<int> m3 = m1 + m2;
        cout << "Sum of matrices:\n";
        m3.display();
    }
    catch(dimensionmismatchexception &e) {
        cout << "Error: " << e.what() << endl;
    }

    return 0;
}
