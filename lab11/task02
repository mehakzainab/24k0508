#include <iostream>
#include <exception>
using namespace std;

class QueueOverflowException : public exception {};
class QueueUnderflowException : public exception {};

template <typename T>
class Queue {
private:
    T* data;
    int nextOutPosition, nextInPosition;
    int currentSize, maxSize;

public:
    Queue(int size) : maxSize(size), nextOutPosition(0), nextInPosition(-1), currentSize(0) {
        data = new T[maxSize];
    }

    ~Queue() {
        delete[] data;
    }

    void enqueue(T value) {
        if (currentSize == maxSize)
            throw QueueOverflowException();

        nextInPosition = (nextInPosition + 1) % maxSize;
        data[nextInPosition] = value;
        currentSize++;
    }

    T dequeue() {
        if (currentSize == 0)
            throw QueueUnderflowException();

        T value = data[nextOutPosition];
        nextOutPosition = (nextOutPosition + 1) % maxSize;
        currentSize--;
        return value;
    }
};

int main() {
    Queue<int> q(3);

    try {
        cout << "Attempting to enqueue to a full queue..." << endl;
        q.enqueue(1);
        q.enqueue(2);
        q.enqueue(3);
        q.enqueue(4);
    } catch (const QueueOverflowException& e) {
        cout << "Caught QueueOverflowException - what(): " << e.what() << endl;
    }

    try {
        cout << "Attempting to dequeue from an empty queue..." << endl;
        q.dequeue();
        q.dequeue();
        q.dequeue();
        q.dequeue();
    } catch (const QueueUnderflowException& e) {
        cout << "Caught QueueUnderflowException - what(): " << e.what() << endl;
    }

    return 0;
}
